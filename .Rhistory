bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(logit.active
),
predicted.treat.0=expit(logit.control), type="binary", treat=t,
smoothing.function = "lm")
dat2=simbinary(3200)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(logit.active
),
predicted.treat.0=expit(logit.control), type="binary", treat=t,
smoothing.function = "lm")
dat2=simbinary(3200)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(logit.active
),
predicted.treat.0=expit(logit.control), type="binary", treat=t,
smoothing.function = "lm")
usethis::use_testthat
usethis::use_testthat()
devtools::test()
# The following function runs a local R CMD check
devtools::check()
# The following function runs a local R CMD check
devtools::check()
rhub::check_for_cran()
devtools::check_win_devel()
install.packages("Matching")
devtools::install_github("esm-ispm-unibe-ch/predieval")
library(predieval)
?predieval
# continuous outcome
dat0=simcont(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# Obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
# assess model performance
predieval(repeats=2, Ngroups=c(5:10),
X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
# binary outcome
dat0=simbinary(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat.in.CV, family = binomial(link = "logit"))
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, glm1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, glm1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
predieval(repeats=2, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 2)
# continuous outcome
dat0=simcont(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# Obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
# assess model performance
predieval(repeats=2, Ngroups=c(5:10),
X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
# binary outcome
dat0=simbinary(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat.in.CV, family = binomial(link = "logit"))
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, glm1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, glm1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
predieval(repeats=2, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 2)
rm(list=ls()) # empty memory
set.seed(42) #the answer to life, the universe and everything
#### load data ----
dat<-datcont # this is the data presented in the paper
Npat<-dim(dat)[1]
# alternatively create new data: dat.original<-simcont(Npat)$dat
##### 10-fold CV repeated 100 times ------
k.folds<-10
repeats<-2
dat.CV<-list()
for (k in 1:repeats){
flds <- createFolds(c(1:Npat), k = k.folds, list = TRUE, returnTrain = FALSE)
dat.out.CV<-list()
for (i in 1:k.folds){
dat.in.CV<-dat[-flds[[i]],]
dat.out.CV[[i]]=dat[flds[[i]],]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1<-lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)
m2<-lm(data=dat.in.CV,
y.observed~x1*x2+x5*x1+x5*x6+x2*x5+x2*x6+t*x3+t*x5+t*x6)
dat.out.CV[[i]]$m2.CV.treat1=predict(newdata=dat1, m2)
dat.out.CV[[i]]$m2.CV.treat0=predict(newdata=dat0, m2)}
dat.CV[[k]]<-dat.out.CV[[1]]
for (i in 2:k.folds){dat.CV[[k]]<-rbind(dat.CV[[k]],dat.out.CV[[i]] )}
}
for(i in 1:repeats){dat.CV[[i]]<-dat.CV[[i]][order(as.numeric(row.names(dat.CV[[i]]))),]}
dat.CV.all<-dat.CV[[1]]
for(k in 2:repeats){
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]<-
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")] +
dat.CV[[k]][,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]
}
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]<-dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]/repeats
# measures of performance for benefit
p1<-predieval(repeats=1000, Ngroups=c(10,20),
X=dat.CV.all[,c("x1", "x2","x3", "x5", "x6")],
Y=dat.CV.all$y.observed,
predicted.treat.1 = dat.CV.all$m1.CV.treat1,
predicted.treat.0 = dat.CV.all$m1.CV.treat0,
treat=dat.CV.all$t, type="continuous")
p2<-predieval(repeats=1000, Ngroups=c(10,20),
X=dat.CV.all[,c("x1", "x2","x3", "x5", "x6")],
Y=dat.CV.all$y.observed,
predicted.treat.1 = dat.CV.all$m2.CV.treat1,
predicted.treat.0 = dat.CV.all$m2.CV.treat0,
treat=dat.CV.all$t, type="continuous")
# calibration plot
# Model M1
bencalibr(Ngroups=10, data=dat.CV.all, y.observed=y.observed,
predicted.treat.1 = m1.CV.treat1,
predicted.treat.0 = m1.CV.treat0, treat=t
, smoothing.function="lm", axis.limits = c(-1, 1.2))
# Model M2
bencalibr(Ngroups=10, data=dat.CV.all, y.observed=y.observed,
predicted.treat.1 = m2.CV.treat1,
predicted.treat.0 = m2.CV.treat0, treat=t
, smoothing.function="lm", axis.limits = c(-1, 1.2))
library(predieval)
library(caret)
rm(list=ls()) # empty memory
set.seed(42) #the answer to life, the universe and everything
#### load data ----
dat<-datcont # this is the data presented in the paper
Npat<-dim(dat)[1]
# alternatively create new data: dat.original<-simcont(Npat)$dat
##### 10-fold CV repeated 100 times ------
k.folds<-10
repeats<-2
dat.CV<-list()
for (k in 1:repeats){
flds <- createFolds(c(1:Npat), k = k.folds, list = TRUE, returnTrain = FALSE)
dat.out.CV<-list()
for (i in 1:k.folds){
dat.in.CV<-dat[-flds[[i]],]
dat.out.CV[[i]]=dat[flds[[i]],]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1<-lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$m1.CV.treat1=predict(newdata=dat1, m1)
dat.out.CV[[i]]$m1.CV.treat0=predict(newdata=dat0, m1)
m2<-lm(data=dat.in.CV,
y.observed~x1*x2+x5*x1+x5*x6+x2*x5+x2*x6+t*x3+t*x5+t*x6)
dat.out.CV[[i]]$m2.CV.treat1=predict(newdata=dat1, m2)
dat.out.CV[[i]]$m2.CV.treat0=predict(newdata=dat0, m2)}
dat.CV[[k]]<-dat.out.CV[[1]]
for (i in 2:k.folds){dat.CV[[k]]<-rbind(dat.CV[[k]],dat.out.CV[[i]] )}
}
for(i in 1:repeats){dat.CV[[i]]<-dat.CV[[i]][order(as.numeric(row.names(dat.CV[[i]]))),]}
dat.CV.all<-dat.CV[[1]]
for(k in 2:repeats){
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]<-
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")] +
dat.CV[[k]][,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]
}
dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]<-dat.CV.all[,c("m1.CV.treat1", "m1.CV.treat0","m2.CV.treat1", "m2.CV.treat0")]/repeats
# measures of performance for benefit
p1<-predieval(repeats=1000, Ngroups=c(10,20),
X=dat.CV.all[,c("x1", "x2","x3", "x5", "x6")],
Y=dat.CV.all$y.observed,
predicted.treat.1 = dat.CV.all$m1.CV.treat1,
predicted.treat.0 = dat.CV.all$m1.CV.treat0,
treat=dat.CV.all$t, type="continuous")
p2<-predieval(repeats=1000, Ngroups=c(10,20),
X=dat.CV.all[,c("x1", "x2","x3", "x5", "x6")],
Y=dat.CV.all$y.observed,
predicted.treat.1 = dat.CV.all$m2.CV.treat1,
predicted.treat.0 = dat.CV.all$m2.CV.treat0,
treat=dat.CV.all$t, type="continuous")
# calibration plot
# Model M1
bencalibr(Ngroups=10, data=dat.CV.all, y.observed=y.observed,
predicted.treat.1 = m1.CV.treat1,
predicted.treat.0 = m1.CV.treat0, treat=t
, smoothing.function="lm", axis.limits = c(-1, 1.2))
# Model M2
bencalibr(Ngroups=10, data=dat.CV.all, y.observed=y.observed,
predicted.treat.1 = m2.CV.treat1,
predicted.treat.0 = m2.CV.treat0, treat=t
, smoothing.function="lm", axis.limits = c(-1, 1.2))
p1
# The following function runs a local R CMD check
devtools::check()
# Check for win-builder
devtools::check_win_devel()
results <- rhub::check_for_cran()
results
devtools::release()
devtools::spell_check()
devtools::release()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
install.packages(c("curl", "httr"))
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_devel()
?devtools::check_win_devel
devtools::check_win_devel(email = )
devtools::check_win_devel(email = "oremiou@gmail.com")
devtools::check_win_devel(email = "oremiou@gmail.com")
?devtools::check_win_devel
devtools::check_win_devel()
devtools::release()
results
results <- rhub::check_for_cran()
usethis::use_cran_comments()
devtools::check_win_devel()
results
results
devtools::check_win_devel()
devtools::check_win_devel()
results
devtools::release()
results
results$cran_summary()
results$cran_summary
results$cran_summary()
devtools::check_win_devel()
devtools::release()
install.packages("predieval")
install.packages("predieval")
library(predieval)
?bencalibr
# binary outcome
dat2=simbinary(500)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(predict.treat.1),
predicted.treat.0=expit(predict.treat.0), type="binary", treat=t,
smoothing.function = "lm")
# binary outcome
dat2=simbinary(500)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(predict.treat.1),
predicted.treat.0=expit(predict.treat.0), type="binary", treat=t,
smoothing.function = "lm")
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
devtools::document()
datcont
devtools::document()
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
load("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/r package/predieval/data/datacont.RData")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/revision/r code revised")
save(dat, file="datacont.RData")
head(dat)
dat=dat[,1:8]
simcont(10)$dat
a=simcont(10)$dat
dim(a)
#save.image(file="examplecont_revision2.RData")
load(file="examplecont_revision2.RData")
setwd("C:/Users/Orestis/Google Drive/PROJECT/calibration for benefit for prediction models/revision/r code revised")
#save.image(file="examplecont_revision2.RData")
load(file="examplecont_revision2.RData")
#save.image(file="examplecont_revision2.RData")
load(file="datcont.RData")
dat
dat=dat[,1:10]
dat
colnames(dat)
dat=dat[,1:9]
dat[1:5m]
dat[1:5,]
save(dat, file="datacont.RData")
#save.image(file="examplebin_revision.RData")
load(file="datbinary.RData")
dat
colnames(dat)
colnames(simbinary(10)$dat
)
dat=dat[,1:11]
save(dat, file="databinary.RData")
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
devtools::test()
devtools::check()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
devtools::check()
remove.packages("predieval", lib="~/R/win-library/4.1")
devtools::install_github("esm-ispm-unibe-ch/predieval")
library(predieval)
?simbinary
dat1=simbinary(100)$dat
head(dat1)
?simcont
dat1=simcont(100)$dat
head(dat1)
?predieval
# continuous outcome
dat0=simcont(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
# Obtain out-of-sample predictions
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
m1=lm(data=dat.in.CV, y.observed~x1*t+x2*t)
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, m1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, m1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
# assess model performance
predieval(repeats=20, Ngroups=c(5:10),
X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = dat.CV$predict.treat.1,
predicted.treat.0 = dat.CV$predict.treat.0,
treat=dat.CV$t, type="continuous")
# binary outcome
dat0=simbinary(500)$dat
head(dat0)
# Randomly shuffle the data
dat<-dat0[sample(nrow(dat0)),]
# Create random folds
dat$folds <- cut(seq(1,nrow(dat)),breaks=10,labels=FALSE)
dat.out.CV<-list()
for (i in 1:10){
dat.in.CV=dat[dat$folds!=i,]
dat.out.CV[[i]]=dat[dat$folds==i,]
dat1<-dat.out.CV[[i]]; dat1$t=1
dat0<-dat.out.CV[[i]]; dat0$t=0
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat.in.CV, family = binomial(link = "logit"))
dat.out.CV[[i]]$predict.treat.1=predict(newdata=dat1, glm1)# predictions in treatment
dat.out.CV[[i]]$predict.treat.0=predict(newdata=dat0, glm1)# predicions in control
}
dat.CV=dat.out.CV[[1]]
for (i in 2:10){  dat.CV=rbind(dat.CV,dat.out.CV[[i]])}
predieval(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 50)
predieval(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 50, Threshold = 0.02)
predieval(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 50, Threshold = 0.1)
predieval(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 50, Threshold = 0.3)
predieval(repeats=20, Ngroups=c(5:10), X=dat.CV[,c("x1", "x2","x3")],
Y=dat.CV$y.observed,
predicted.treat.1 = expit(dat.CV$predict.treat.1),
predicted.treat.0 = expit(dat.CV$predict.treat.0),
treat=dat.CV$t, type="binary",bootstraps = 50, Threshold = 0.2)
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::document()
?simbinary
?simcont
devtools::check()
