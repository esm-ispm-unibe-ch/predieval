devtools::check()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
library(netmeta)
?netmeta
devtools::check()
spell_check()
devtools::spell_check()
devtools::spell_check()
devtools::check()
devtools::spell_check()
inteRgrate::check_pkg()
install.packages("inteRgrate")
check_tidy_description()
results <- rhub::check_for_cran()
results
devtools::check()
results <- rhub::check_for_cran()
results
devtools::check()
results <- rhub::check_for_cran()
results
devtools::release()
check_win_devel()
??check_win_devel
devtools::check_win_devel()
devtools::check()
devtools::release()
usethis::use_news_md
usethis::use_news_md()
devtools::check()
devtools::check()
results=rhub::check_for_cran()
results
devtools::check()
library(devtools)
library(roxygen2) # In-Line Documentation for R
library(devtools) # Tools to Make Developing R Packages Easier
library(testthat) # Unit Testing for R
library(usethis)  # Automate Package and Project Setup
devtools::release()
devtools::release()
results <- rhub::check_for_cran()
devtools::document()
?bencalibr
dat2=simbinary(500)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x3)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(predict.treat.1),
predicted.treat.0=expit(predict.treat.0), type="binary", treat=t,
smoothing.function = "lm")
dat2=simbinary(500)$dat
head(dat2)
glm1=glm(y.observed~(x1+x2+x4)*t, data=dat2, family = binomial(link = "logit"))
dat2.t0=dat2; dat2.t0$t=0
dat2.t1=dat2; dat2.t1$t=1
dat2$predict.treat.1=predict(glm1, newdata = dat2.t1) # predictions in treatment
dat2$predict.treat.0=predict(glm1, newdata = dat2.t0) # predicions in control
bencalibr(data=dat2, Ngroups=6, y.observed, predicted.treat.1=expit(predict.treat.1),
predicted.treat.0=expit(predict.treat.0), type="binary", treat=t,
smoothing.function = "lm")
devtools::install_git( esm-ispm-unibe-ch /
predieval
)
devtools::install_git( "esm-ispm-unibe-ch /
predieval"
)
devtools::install_git("esm-ispm-unibe-ch/predieval")
library(devtools)
?install_github("esm-ispm-unibe-ch/predieval")
install_github("esm-ispm-unibe-ch/predieval")
library(predieval)
?bencalibr
remove.packages("predieval", lib="~/R/win-library/4.1")
devtools::check()
